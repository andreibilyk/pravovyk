# -*- coding: utf-8 -*-
import config
import os
from flask import Flask, request
import telebot
import logging
from telebot import types
from SQLighter import SQLighter
import utils




bot = telebot.TeleBot(config.token)

db_worker = SQLighter()

@bot.message_handler(commands=['start'])
def handle_commands(message):

 row = db_worker.select_single(1)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
 markup = utils.generate_markup(row[2])
 repeat_all_messages._steps = []
 bot.send_message(message.chat.id,"–û–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É",reply_markup=markup)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def repeat_all_messages(message):
 if not hasattr(repeat_all_messages, '_steps'):  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
  repeat_all_messages._steps = []
 text = message.text.encode('utf-8')
 bot.send_message(""" <p style="text-align: center;">–ó–≥—ñ–¥–Ω–æ –∑—ñ —Å—Ç.&nbsp;4 –ó–∞–∫–æ–Ω—É –£–∫—Ä–∞—ó–Ω–∏ &laquo;–ü—Ä–æ –ø—Ä–∞–≤–∞ —Å–ø–æ–∂–∏–≤–∞—á–∞&raquo;</p>
<p style="text-align: center;">–°–ø–æ–∂–∏–≤–∞—á –º–∞—î –Ω–∞—Å—Ç—É–ø–Ω—ñ <em><strong>–ø—Ä–∞–≤–∞</strong></em>:</p>
<ul style="list-style-type: disc;">
<li><strong>–∑–∞—Ö–∏—Å—Ç —Å–≤–æ—ó—Ö –ø—Ä–∞–≤ –¥–µ—Ä–∂–∞–≤–æ—é</strong> (–∑–¥—ñ–π—Å–Ω—é—é—Ç—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞—Ö–∏—Å—Ç—É –ø—Ä–∞–≤ —Å–ø–æ–∂–∏–≤–∞—á—ñ–≤, –æ—Ä–≥–∞–Ω–∏ –î–µ—Ä–∂—Å–ø–æ–∂–∏–≤—Å—Ç–∞–Ω–¥–∞—Ä—Ç—É, —Å—É–¥–æ–≤—ñ –æ—Ä–≥–∞–Ω–∏);</li>
<li><strong>–Ω–∞–ª–µ–∂–Ω—É —è–∫—ñ—Å—Ç—å</strong> –ø—Ä–æ–¥—É–∫—Ü—ñ—ó —Ç–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è;</li>
<li><strong>–±–µ–∑–ø–µ–∫—É</strong> –ø—Ä–æ–¥—É–∫—Ü—ñ—ó;</li>
<li>–Ω–µ–æ–±—Ö—ñ–¥–Ω—É, –¥–æ—Å—Ç—É–ø–Ω—É, –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω—É —Ç–∞ –≤—á–∞—Å–Ω—É <strong>—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é</strong> –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ü—ñ—é, —ó—ó –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —è–∫—ñ—Å—Ç—å, –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –∞ —Ç–∞–∫–æ–∂ –ø—Ä–æ —ó—ó –≤–∏—Ä–æ–±–Ω–∏–∫–∞ (–≤–∏–∫–æ–Ω–∞–≤—Ü—è, –ø—Ä–æ–¥–∞–≤—Ü—è);</li>
<li>–≤—ñ–¥—à–∫–æ–¥—É–≤–∞–Ω–Ω—è <strong>–º–∞–π–Ω–æ–≤–æ—ó —Ç–∞ –º–æ—Ä–∞–ª—å–Ω–æ—ó —à–∫–æ–¥–∏</strong>, –∑–∞–≤–¥–∞–Ω–æ—ó —á–µ—Ä–µ–∑ –Ω–µ–¥–æ–ª—ñ–∫–∏ –ø—Ä–æ–¥—É–∫—Ü—ñ—ó (–¥–µ—Ñ–µ–∫—Ç—É), –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞–∫–æ–Ω—É;</li>
<li>–∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å—É–¥—É —Ç–∞ —ñ–Ω—à–∏—Ö —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–∏—Ö –¥–µ—Ä–∂–∞–≤–Ω–∏—Ö –æ—Ä–≥–∞–Ω—ñ–≤ –ø–æ <strong>–∑–∞—Ö–∏—Å—Ç –ø–æ—Ä—É—à–µ–Ω–∏—Ö –ø—Ä–∞–≤</strong>;</li>
<li>–æ–±'—î–¥–Ω–∞—Ç–∏—Å—è –≤ <strong>–≥—Ä–æ–º–∞–¥—Å—å–∫—ñ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó</strong> —Å–ø–æ–∂–∏–≤–∞—á—ñ–≤ (–æ–±'—î–¥–Ω–∞–Ω–Ω—è —Å–ø–æ–∂–∏–≤–∞—á—ñ–≤).</li>
</ul> """,parse_mode='HTML')
 if text == "–û–±—Ä–∞—Ç–∏ —Å—Ñ–µ—Ä—Éüìã":
  row = db_worker.select_single(1)
     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
  markup = utils.generate_markup(row[2])
  repeat_all_messages._steps = []
  bot.send_message(message.chat.id,"–û–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É",reply_markup=markup)
  return
 elif text == "–ù–∞–∑–∞–¥üîô":
  if len(repeat_all_messages._steps) >= 2:
   text = repeat_all_messages._steps[len(repeat_all_messages._steps)-2]
   repeat_all_messages._steps.remove(repeat_all_messages._steps[len(repeat_all_messages._steps)-1])
   repeat_all_messages._steps.remove(repeat_all_messages._steps[len(repeat_all_messages._steps)-2])
  elif len(repeat_all_messages._steps) < 2:
   row = db_worker.select_single(1)
      # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
   markup = utils.generate_markup(row[2])
   repeat_all_messages._steps = []
   bot.send_message(message.chat.id,"–û–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É",reply_markup=markup)
   return
 try:
  row = db_worker.select_row(text)
  if row[2]:
   markup = utils.generate_markup(row[2])
   markup.add("–û–±—Ä–∞—Ç–∏ —Å—Ñ–µ—Ä—Éüìã","–ù–∞–∑–∞–¥üîô")
   repeat_all_messages._steps.append(text)
   bot.send_message(message.chat.id,row[1],reply_markup=markup)
  else:
   bot.send_message(message.chat.id,+row[1].encode('utf-8'))
  try:
   file_id = db_worker.select_file(text)
   bot.send_document(message.chat.id,file_id)
  except Exception:
   pass
 except BaseException as e:
  bot.send_message(message.chat.id,"–í–∏–±–∞—á—Ç–µ,—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —â–µ –Ω–µ–º–∞,–º–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —Ü–∏–º")

@bot.message_handler(content_types=["document"])
def audio_sent(message):
 bot.send_message(message.chat.id, message.document.file_id)

server = Flask(__name__)

@server.route("/bot", methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200


server.run(host="0.0.0.0", port=os.environ.get('PORT', 8443))
